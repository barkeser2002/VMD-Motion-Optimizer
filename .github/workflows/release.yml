name: Release

on:
  push:
    branches: [ main, master ]
    paths:
      - 'version.txt'
      - 'scripts/**'
      - 'README*'
      - 'requirements.txt'
      - 'build_exe.bat'
      - 'build_exe.ps1'
      - 'logo.png'
      - 'icon.ico'
      - '.github/workflows/release.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Read version
        id: ver
        shell: bash
        run: |
          VER=$(cat version.txt | tr -d '\r\n')
          echo "version=$VER" >> $GITHUB_OUTPUT

      - name: Create tag if missing
        shell: bash
        run: |
          TAG="v${{ steps.ver.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
          else
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Build (PyInstaller)
        shell: pwsh
        run: |
          $opts  = @('--noconfirm','--clean','--name','VMDOptimizer','--onedir','--windowed')
          $extra = @('--add-data','scripts;scripts','--add-data','version.txt;.')
          if (Test-Path 'logo.png') { $extra += @('--add-data','logo.png;.') }
          if (Test-Path 'icon.ico') { $extra += @('--add-data','icon.ico;.','--icon','icon.ico') }
          python -m PyInstaller @opts @extra scripts/app.py

      - name: Archive build as ZIP
        shell: pwsh
        run: |
          $ver = '${{ steps.ver.outputs.version }}'
          $zip = "VMDOptimizer-$ver.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path "dist/VMDOptimizer/*" -DestinationPath $zip

      - name: Upload artifact (workflow)
        uses: actions/upload-artifact@v4
        with:
          name: VMDOptimizer-${{ steps.ver.outputs.version }}
          path: |
            dist/VMDOptimizer
            VMDOptimizer-${{ steps.ver.outputs.version }}.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.version }}
          name: VMD Motion Optimizer by Barış Keser (barkeser2002) v${{ steps.ver.outputs.version }}
          body: |
            VMD Motion Optimizer by Barış Keser (barkeser2002)
            - See README for usage.
          files: |
            VMDOptimizer-${{ steps.ver.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
